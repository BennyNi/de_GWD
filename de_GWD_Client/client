#!/bin/bash
clear
function blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
function yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
function green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
function red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }


architecture=""
case $(uname -m) in
    x86_64)  architecture="amd64" ;;
    aarch64)  architecture="aarch64" ;;
esac



performance_mod(){
sed -i '/GRUB_CMDLINE_LINUX_DEFAULT=/c\GRUB_CMDLINE_LINUX_DEFAULT="quiet splash zswap.enabled=1 zswap.compressor=lz4"'  /etc/default/grub
update-grub
sed -i '/fs.file-max/d' /etc/sysctl.conf
sed -i '/net.ipv4.ip_local_port_range/d' /etc/sysctl.conf
sed -i '/net.ipv4.ip_forward/d' /etc/sysctl.conf
sed -i '/net.ipv6.conf.all.forwarding/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_fastopen/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_tw_reuse/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_tw_recycle/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_syn_retries/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_synack_retries/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_timestamps/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_fin_timeout/d' /etc/sysctl.conf
cat >> /etc/sysctl.conf << EOF
fs.file-max=99999
net.ipv4.ip_local_port_range=1024   65535
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
net.ipv4.tcp_fastopen=3
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_tw_reuse=1
net.ipv4.tcp_tw_recycle=0
net.ipv4.tcp_syn_retries=2
net.ipv4.tcp_synack_retries=2
net.ipv4.tcp_timestamps=0
net.ipv4.tcp_fin_timeout=30
EOF
sysctl -p

if [ $architecture = "aarch64" ]; then
sed -i '/GOVERNOR=/c\GOVERNOR=performance' /etc/default/cpufrequtils
/etc/init.d/cpufrequtils restart;
fi
blue "---------------------"
blue  "优化性能与网络 [完毕]"
blue "---------------------"
}



install_gatewayrouter(){
    green "==============="
    green "本机地址"
    green "==============="
    read localaddr

    green "==============="
    green "上级路由地址"
    green "==============="
    read gatewayaddr

    green "==============="
    green "v2ray节点域名"
    green "==============="
    read v2servn
    
    green "==============="
    green "输入v2ray uuid"
    green "==============="
    read uuidnum

    green "==============="
    green "输入path"
    green "==============="
    read v2path

ethernetnum="$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1)"


cat > /etc/apt/sources.list << EOF
deb http://mirrors.163.com/debian/ stretch main non-free contrib
deb http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib
deb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib
EOF

cat > /etc/locale.gen << EOF
en_US.UTF-8 UTF-8
zh_CN.GBK GBK
zh_CN.UTF-8 UTF-8
EOF
locale-gen

apt-get update

apt-get install -y unzip ipset net-tools ipset git make gcc curl

curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\| '{ printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > /usr/local/etc/chnroute.txt

mkdir -p /etc/v2ray
mkdir -p /usr/bin/v2ray
mkdir -p /var/log/v2ray
if [ $architecture = "aarch64" ]; then
wget --no-check-certificate https://accaly.ooo/v2aarch64.zip -O ~/v2aarch64.zip
unzip v2aarch64.zip
mv -f ~/v2aarch64/v2ray /usr/bin/v2ray/v2ray
mv -f ~/v2aarch64/v2ctl /usr/bin/v2ray/v2ctl
mv -f ~/v2aarch64/v2ray.service /etc/systemd/system/v2ray.service
mv -f ~/v2aarch64/v2wt-client.json /etc/v2ray/config.json
rm -rf ~/v2aarch64
rm -rf ~/v2aarch64.zip
elif [ $architecture = "amd64" ]; then
wget --no-check-certificate https://accaly.ooo/v2amd64.zip -O ~/v2amd64.zip
unzip v2amd64.zip
mv -f ~/v2amd64/v2ray /usr/bin/v2ray/v2ray
mv -f ~/v2amd64/v2ctl /usr/bin/v2ray/v2ctl
mv -f ~/v2amd64/v2ray.service /etc/systemd/system/v2ray.service
mv -f ~/v2amd64/v2wt-client.json /etc/v2ray/config.json
rm -rf ~/v2amd64
rm -rf ~/v2amd64.zip
fi
sed -i '/"address":/c\"address": "'$v2servn'",'  /etc/v2ray/config.json
sed -i '/"id":/c\"id": "'$uuidnum'",'  /etc/v2ray/config.json
sed -i '/"serverName":/c\"serverName": "'$v2servn'",'  /etc/v2ray/config.json
sed -i '/"path":/c\"path": "'$v2path'",'  /etc/v2ray/config.json
sed -i '/"Host":/c\"Host": "'$v2servn'"'  /etc/v2ray/config.json
chmod +x /usr/bin/v2ray/v2ray
chmod +x /usr/bin/v2ray/v2ctl
systemctl restart v2ray
systemctl enable v2ray


mkdir -p /usr/local/etc/iptables-proxy
cat > /usr/local/etc/iptables-proxy/iptables-proxy-up << "EOF"
#!/bin/bash
systemctl restart v2ray

ipset -X chnroute &>/dev/null
ipset -N chnroute hash:net maxelem 65536
for ip in $(cat '/usr/local/etc/chnroute.txt'); do
  ipset add chnroute $ip
done

iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT
iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT

iptables -t nat -N V2RAYTCP

iptables -t nat -A V2RAYTCP -d 0.0.0.0/8 -j RETURN
iptables -t nat -A V2RAYTCP -d 10.0.0.0/8 -j RETURN
iptables -t nat -A V2RAYTCP -d 100.64.0.0/10 -j RETURN
iptables -t nat -A V2RAYTCP -d 127.0.0.0/8 -j RETURN
iptables -t nat -A V2RAYTCP -d 169.254.0.0/16 -j RETURN
iptables -t nat -A V2RAYTCP -d 172.16.0.0/12 -j RETURN
iptables -t nat -A V2RAYTCP -d 192.168.0.0/16 -j RETURN
iptables -t nat -A V2RAYTCP -d 224.0.0.0/4 -j RETURN
iptables -t nat -A V2RAYTCP -d 240.0.0.0/4 -j RETURN
iptables -t nat -A V2RAYTCP -p tcp -m set --match-set chnroute dst -j RETURN
iptables -t nat -A V2RAYTCP -p tcp -m mark --mark 0xff -j RETURN

iptables -t nat -A V2RAYTCP -p tcp -j REDIRECT --to-ports 9896
iptables -t nat -A PREROUTING -p tcp -j V2RAYTCP
iptables -t nat -A OUTPUT -p tcp -j V2RAYTCP


ip rule add fwmark 9 table 909
ip route add local 0.0.0.0/0 dev lo table 909
iptables -t mangle -N V2RAYUDP

iptables -t mangle -A V2RAYUDP -d 0.0.0.0/8 -j RETURN
iptables -t mangle -A V2RAYUDP -d 10.0.0.0/8 -j RETURN
iptables -t mangle -A V2RAYUDP -d 100.64.0.0/10 -j RETURN
iptables -t mangle -A V2RAYUDP -d 127.0.0.0/8 -j RETURN
iptables -t mangle -A V2RAYUDP -d 169.254.0.0/16 -j RETURN
iptables -t mangle -A V2RAYUDP -d 172.16.0.0/12 -j RETURN
iptables -t mangle -A V2RAYUDP -d 192.168.0.0/16 -j RETURN
iptables -t mangle -A V2RAYUDP -d 224.0.0.0/4 -j RETURN
iptables -t mangle -A V2RAYUDP -d 240.0.0.0/4 -j RETURN
iptables -t mangle -A V2RAYUDP -p udp -m set --match-set chnroute dst -j RETURN
iptables -t mangle -A V2RAYUDP -p udp -m mark --mark 0xff -j RETURN

iptables -t mangle -A V2RAYUDP -p udp -j TPROXY --on-port 9896 --tproxy-mark 0x9/0x9
iptables -t mangle -A PREROUTING -p udp -j V2RAYUDP
systemctl restart v2ray
EOF
chmod +x /usr/local/etc/iptables-proxy/iptables-proxy-up

cat > /usr/local/etc/iptables-proxy/iptables-proxy-down << EOF
#!/bin/bash
systemctl stop v2ray

ip route flush table 909
ip rule delete fwmark 9

iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X

ipset destroy chnroute
EOF
chmod +x /usr/local/etc/iptables-proxy/iptables-proxy-down

cat > /etc/systemd/system/iptables-proxy.service << EOF
[Unit]
Description=iptables-proxy
Requires=network.target network-online.target
After=network-online.target pihole-FTL.service
Wants=network-online.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/etc/iptables-proxy/iptables-proxy-up
ExecStop=/usr/local/etc/iptables-proxy/iptables-proxy-down

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl restart iptables-proxy
systemctl enable iptables-proxy


if [ "$(go version | awk '{print $3}')" != "go1.11.5" ]; then
    if [ $architecture = "aarch64" ]; then
        wget https://dl.google.com/go/go1.11.5.linux-arm64.tar.gz
        tar -xvf go1.11.5.linux-arm64.tar.gz
        rm -rf ~/go1.11.5.linux-arm64.tar.gz
    elif [ $architecture = "amd64" ]; then
        wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
        tar -xvf go1.11.5.linux-amd64.tar.gz
        rm -rf ~/go1.11.5.linux-amd64.tar.gz
    fi
mv go /usr/local
mkdir ~/gopath
cat >> ~/.profile << "EOF"
export GOROOT=/usr/local/go
export GOPATH=~/gopath
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
EOF
source ~/.profile
fi

rm -rf ~/dns-over-https
rm -rf /usr/local/bin/doh-client
rm -rf /usr/local/bin/doh-server
rm -rf /etc/NetworkManager/dispatcher.d
rm -rf /usr/lib/systemd/system/doh-client.service
rm -rf /usr/lib/systemd/system/doh-server.service
git clone https://github.com/m13253/dns-over-https.git
cd dns-over-https
make && make install
cd ~/
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Client/doh-client.conf -O /etc/dns-over-https/doh-client.conf
doh_upstream='url = "https:\/\/'$v2servn'\/dq"'
sed -i "14s/.*/$doh_upstream/" /etc/dns-over-https/doh-client.conf
sed -i "19s/.*/$doh_upstream/" /etc/dns-over-https/doh-client.conf
sed -i "24s/.*/$doh_upstream/" /etc/dns-over-https/doh-client.conf
sed -i "29s/.*/$doh_upstream/" /etc/dns-over-https/doh-client.conf
systemctl disable systemd-resolved
systemctl mask systemd-resolved
systemctl restart doh-client
systemctl enable doh-client
rm -rf ~/dns-over-https


curl -sSL https://install.pi-hole.net | bash


sed -i '/PIHOLE_DNS_1=/c\PIHOLE_DNS_1=114.114.114.114#53'  /etc/pihole/setupVars.conf
sed -i '/PIHOLE_DNS_2=/c\PIHOLE_DNS_2=127.0.0.1#5380'  /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
echo "server=114.114.114.114#53" >> /etc/dnsmasq.d/01-pihole.conf
echo "server=127.0.0.1#5380" >> /etc/dnsmasq.d/01-pihole.conf
sed -i "/static ip_address=/c\static ip_address=$localaddr/24" /etc/dhcpcd.conf
sed -i "/static routers=/c\static routers=$gatewayaddr" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/c\static domain_name_servers=127.0.0.1" /etc/dhcpcd.conf
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf

cat > /etc/network/interfaces << EOF
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF

route del default
route add default gw $gatewayaddr $ethernetnum

sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
pihole restartdns
systemctl restart pihole-FTL


cat > /usr/local/etc/updateGWD << "EOF"
#!/bin/bash
curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\| '{ printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > /usr/local/etc/chnroute.txt

bash <(curl -L -s https://install.direct/go.sh)
EOF
chmod +x /usr/local/etc/updateGWD
if [ "$(crontab -l | grep 'updateGWD' | awk '{print $6}')" != "/usr/local/etc/updateGWD" ]; then
    crontab -l > now.cron
    echo '0 4 * * * /usr/local/etc/updateGWD' >> now.cron
    crontab now.cron
fi
rm -rf now.cron


statusgod=$(green "✔︎") 
statusbad=$(red "✘")

blue "---------------------------------"
blue "安装v2ray+route+doh+pihole [完毕]"
blue "---------------------------------"
if [ $(systemctl is-active v2ray) = "active" ]; then
    echo "[$statusgod] v2ray     进程正常"
else
    echo "[$statusbad] v2ray     进程出错"
fi


if [ $(systemctl is-active iptables-proxy) = "active" ]; then
    echo "[$statusgod] 代理规则  进程正常"
else
    echo "[$statusbad] 代理规则  进程出错"
fi


if [ $(systemctl is-active doh-client) = "active" ]; then
    echo "[$statusgod] DoH客户端 进程正常"
else
    echo "[$statusbad] DoH客户端 进程出错"
fi


if [ $(systemctl is-active pihole-FTL) = "active" ]; then
    echo "[$statusgod] pihole    进程正常"
else
    echo "[$statusbad] pihole    进程出错"
fi
}



change_piholeadmin(){
pihole -a -p
blue "-----------------------"
blue  "更改Pi-hole密码 [完毕]"
blue "-----------------------"
}



update_doh(){
read -p "输入DoH地址1:" doh1
read -p "输入DoH地址2:" doh2
doh_upstream1='url = "https:\/\/'$doh1'\/dq"'
doh_upstream2='url = "https:\/\/'$doh2'\/dq"'

sed -i "14s/.*/$doh_upstream1/" /etc/dns-over-https/doh-client.conf
sed -i "19s/.*/$doh_upstream2/" /etc/dns-over-https/doh-client.conf
sed -i "24s/.*/$doh_upstream1/" /etc/dns-over-https/doh-client.conf
sed -i "29s/.*/$doh_upstream2/" /etc/dns-over-https/doh-client.conf
systemctl restart doh-client
blue "-------------------"
blue  "更改DoH地址 [完毕]"
blue "-------------------"
}


change_staticip(){
    green "====================="
    green "本机地址（留空回车跳过）"
    green "====================="
    read localaddr
if [ "$localaddr" != "" ]; then 
sed -i "/address/c\address $localaddr"  /etc/network/interfaces
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf
fi

    green "====================="
    green "上级地址（留空回车跳过）"
    green "====================="
    read gatewayaddr
if [ "$gatewayaddr" != "" ]; then 
sed -i "/gateway/c\gateway $gatewayaddr"  /etc/network/interfaces
fi

sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
sed -i "/static ip_address=/c\static ip_address=$localaddr/24" /etc/dhcpcd.conf
sed -i "/static routers=/c\static routers=$gatewayaddr" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/c\static domain_name_servers=127.0.0.1" /etc/dhcpcd.conf
blue "------------------"
blue  "更改静态IP [完毕]"
blue "------------------"
}



change_v2ray(){
    green "==============="
    green "v2ray节点域名"
    green "==============="
    read v2servn
    
    green "=========================="
    green "输入v2ray uuid （回车跳过）"
    green "=========================="
    read uuidnum
if [ "$uuidnum" != "" ]; then 
sed -i '/"id":/c\"id": "'$uuidnum'",'  /etc/v2ray/config.json
fi

    green "===================="
    green "输入path （回车跳过）"
    green "===================="
    read v2path
if [ "$v2path" != "" ]; then 
sed -i '/"path":/c\"path": "'$v2path'",'  /etc/v2ray/config.json
fi

sed -i '/"address":/c\"address": "'$v2servn'",'  /etc/v2ray/config.json
sed -i '/"serverName":/c\"serverName": "'$v2servn'",'  /etc/v2ray/config.json
sed -i '/"Host":/c\"Host": "'$v2servn'"'  /etc/v2ray/config.json
systemctl restart v2ray
blue "---------------------"
blue  "更改v2ray节点 [完毕]"
blue "---------------------"
}


switch_ipotables_proxy(){
    green "======================"
    green "Y.启动代理 / N.停止代理"
    green "======================"
    read iptablesproxyyn
if [ "$iptablesproxyyn" = "Y" ] || [ "$iptablesproxyyn" = "y" ]; then
echo "[...] 耐心等待代理启动"
systemctl restart iptables-proxy
blue "-------------"
blue  "[代理已启动]"
blue "-------------"
elif [ "$iptablesproxyyn" = "N" ] || [ "$iptablesproxyyn" = "n" ]; then
systemctl stop iptables-proxy
blue "-------------"
blue  "[代理已关闭]"
blue "-------------"
fi
}




start_menu(){
    green "============================================"
    green "              客户端                       "
    green "介绍：一条龙安装v2ray+pihole+doh+透明网关路由 "
    green "系统：仅测于Debian9 (amd64 & aarch64)       "
    green "作者：jacyl4                               "
    green "网站：jacyl4.github.io                     "
    green "============================================"
    echo
    green  "1. 优化性能与网络"
    green  "2. 安装v2ray+route+doh+pihole"
    green  "3. 更改Pi-hole密码"
    green  "4. 更改静态IP"
    red    "8. 代理开关"
    green  "9. 更改DoH地址"
    yellow "0. 更改v2ray节点"
    yellow "CTRL+C退出"
    echo
    read -p "请输入数字:" num
    case "$num" in
    1)
    performance_mod
    start_menu
    ;;
    2)
    install_gatewayrouter
    start_menu
    ;;
    3)
    change_piholeadmin
    start_menu 
    ;;
    4)
    change_staticip
    start_menu 
    ;;
    8)
    switch_ipotables_proxy
    start_menu 
    ;;
    9)
    update_doh
    start_menu 
    ;;
    0)
    change_v2ray
    start_menu
    ;;
    *)
    clear
    red "请输入正确数字"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu