#!/bin/bash
clear
function blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
function yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
function green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
function red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }


install_v2ray+nginx+tls+pihole+doh(){
    green "=============================="
    green " 输入此VPS的域名(不加www开头)"
    green "=============================="
    read vpsdomain

    green "============"
    green " v2ray uuid"
    green "============"
    read uuidnum

    green "========================="
    green " v2ray path (格式：/xxxx)"
    green "========================="
    read v2path

export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_TYPE=en_US.UTF-8
export LANG=en_US.UTF-8
locale-gen en_US.UTF-8

sed -i '/GRUB_CMDLINE_LINUX_DEFAULT=/c\GRUB_CMDLINE_LINUX_DEFAULT="quiet splash zswap.enabled=1 zswap.compressor=lz4"'  /etc/default/grub
update-grub
sed -i '/fs.file-max/d' /etc/sysctl.conf
sed -i '/net.ipv6.conf.all.disable_ipv6/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_fastopen/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_syn_retries/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_synack_retries/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_timestamps/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_fin_timeout/d' /etc/sysctl.conf

sed -i '/65536/d' /etc/security/limits.conf
sed -i '/# End of file/i\* soft nproc 65536' /etc/security/limits.conf
sed -i '/# End of file/i\* hard nproc 65536' /etc/security/limits.conf
sed -i '/# End of file/i\* soft nofile 65536' /etc/security/limits.conf
sed -i '/# End of file/i\* hard nofile 65536' /etc/security/limits.conf
echo "ulimit -n 65536" > .bash_profile

cat >> /etc/sysctl.conf << EOF
fs.file-max=65536
net.ipv6.conf.all.disable_ipv6=1
net.ipv4.tcp_fastopen=3
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_syn_retries=2
net.ipv4.tcp_synack_retries=2
net.ipv4.tcp_timestamps=0
net.ipv4.tcp_fin_timeout=30
EOF
sysctl -p


apt update && apt -y upgrade
apt install -y curl git make gcc ca-certificates unzip net-tools


cat > /usr/local/bin/updateGWD << "EOF"
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

bash <(curl -L -s https://install.direct/go.sh)
EOF
chmod +x /usr/local/bin/updateGWD


if [[ "$(crontab -l | grep 'updateGWD' | awk '{print $6}')" != "/usr/local/bin/updateGWD" ]]; then
crontab -l > now.cron
echo '0 0 * * * /usr/local/bin/updateGWD' >> now.cron
crontab now.cron
fi
rm -rf now.cron


/usr/local/bin/updateGWD
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/v2wt-server.json -O /etc/v2ray/config.json
sed -i '/"address":/c\"address": "'$vpsdomain'",'  /etc/v2ray/config.json
sed -i '/"serverName":/c\"serverName": "'$vpsdomain'",'  /etc/v2ray/config.json
sed -i '/"Host":/c\"Host": "'$vpsdomain'"'  /etc/v2ray/config.json
sed -i '/"id":/c\"id": "'$uuidnum'",'  /etc/v2ray/config.json
sed -i '/"path":/c\"path": "'$v2path'"'  /etc/v2ray/config.json
systemctl restart v2ray
systemctl enable v2ray


if [[ "$(nginx -v 2>&1 | awk  '{print $3}' | cut -d'/' -f1)" != "nginx" ]] || [[ -d "/etc/nginx" ]]; then
apt install -y nginx socat
cat > /etc/nginx/nginx.conf << EOF
user  www-data www-data;
worker_processes auto;

    worker_rlimit_nofile 65535;

events {
    use epoll;
    multi_accept on;
    worker_connections  65535;
}

http {
  include mime.types;
  default_type application/octet-stream;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 60;
  types_hash_max_size 2048;

  gzip              on;
  gzip_comp_level   2;
  gzip_min_length   1000;
  gzip_buffers      16 8k;
  gzip_http_version 1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                application/javascript
                application/x-javascript
                application/json
                application/xml
                application/xml+rss
                image/svg+xml/javascript;
  gzip_proxied      any;
  gzip_vary         on;
  gzip_disable      "MSIE [1-6]\.";

  server_tokens off;
  access_log off;
  error_log off;

  include /etc/nginx/conf.d/*.conf;
}
EOF

cat > /etc/nginx/conf.d/default.conf<< EOF
server {
    listen       80;
    server_name  $vpsdomain;
    root /var/www/html;
    index index.php index.html index.htm;
}
EOF
systemctl restart nginx


mkdir -p /var/www/ssl
curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --issue -d $vpsdomain -w /var/www/html
~/.acme.sh/acme.sh --installcert -d $vpsdomain \
               --keypath       /var/www/ssl/$vpsdomain.key  \
               --fullchainpath /var/www/ssl/$vpsdomain.key.pem \
               --reloadcmd     "systemctl force-reload nginx"
openssl dhparam -out /var/www/ssl/dhparam.pem 2048
openssl x509 -outform der -in /var/www/ssl/$vpsdomain.key.pem -out /var/www/ssl/$vpsdomain.crt


cat > /var/www/ssl/update_ocsp_cache << EOF
#!/bin/bash
wget -O intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv intermediate.pem /var/www/ssl
mv root.pem /var/www/ssl
cat /var/www/ssl/intermediate.pem > /var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >> /var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/$vpsdomain.key.pem \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /var/www/ssl/ocsp.resp
EOF
chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

if [[ "$(crontab -l | grep 'update_ocsp_cache' | awk '{print $6}')" != "/var/www/ssl/update_ocsp_cache" ]]; then
crontab -l > now.cron
echo '0 0 * * 7 /var/www/ssl/update_ocsp_cache' >> now.cron
crontab now.cron
fi
rm -rf now.cron

cat > /etc/nginx/conf.d/default.conf<< EOF
upstream dns-backend {
  server 127.0.0.1:8053;
}

server {
  listen 80;
  server_name $vpsdomain www.$vpsdomain;
  root /var/www/html;
  index index.html index.htm index.nginx-debian.html;

  access_log off;
  error_log off;

  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 ssl http2;
  server_name $vpsdomain www.$vpsdomain;
  root /var/www/html;
  index index.html index.htm index.nginx-debian.html;

  ssl on;
  ssl_certificate /var/www/ssl/$vpsdomain.key.pem;
  ssl_certificate_key /var/www/ssl/$vpsdomain.key;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5";
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_dhparam /var/www/ssl/dhparam.pem;
  
  # OCSP Stapling ---
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  resolver 8.8.8.8 valid=600s;
  resolver_timeout 5s;

location /dq {
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "Upgrade";
  proxy_set_header Host "$vpsdomain";
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_buffering         off;
  proxy_buffer_size       8k;
  proxy_pass http://dns-backend;
}

location $v2path {
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "Upgrade";
  proxy_set_header Host \$http_host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_buffering         off;
  proxy_buffer_size       8k;
  proxy_pass              http://127.0.0.1:11811;
}
  access_log off;
  error_log off;
}
EOF

elif [[ -d "/usr/local/nginx" ]]; then
nginxdomain="$(cd /home/wwwroot && ls | grep $vpsdomain)"

cat > /usr/local/nginx/conf/ssl/$nginxdomain/update_ocsp_cache << EOF
#!/bin/bash
wget -O intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv -f intermediate.pem /usr/local/nginx/conf/ssl/$nginxdomain/
mv -f root.pem /usr/local/nginx/conf/ssl/$nginxdomain/
cat /usr/local/nginx/conf/ssl/$nginxdomain/intermediate.pem > /usr/local/nginx/conf/ssl/$nginxdomain/bundle.pem
cat /usr/local/nginx/conf/ssl/$nginxdomain/root.pem >> /usr/local/nginx/conf/ssl/$nginxdomain/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /usr/local/nginx/conf/ssl/$nginxdomain/intermediate.pem \
    -cert    /usr/local/nginx/conf/ssl/$nginxdomain/fullchain.cer \
    -CAfile  /usr/local/nginx/conf/ssl/$nginxdomain/bundle.pem \
    -VAfile  /usr/local/nginx/conf/ssl/$nginxdomain/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /usr/local/nginx/conf/ssl/$nginxdomain/ocsp.resp
EOF
chmod +x /usr/local/nginx/conf/ssl/$nginxdomain/update_ocsp_cache
/usr/local/nginx/conf/ssl/$nginxdomain/update_ocsp_cache


if [[ "$(crontab -l | grep 'update_ocsp_cache' | awk '{print $6}')" != "/usr/local/nginx/conf/ssl/'$nginxdomain'/update_ocsp_cache" ]]; then
crontab -l > now.cron
echo "0 0 * * 7 /usr/local/nginx/conf/ssl/$nginxdomain/update_ocsp_cache" >> now.cron
crontab now.cron
fi
rm -rf now.cron

cat > /usr/local/nginx/conf/vhost/$nginxdomain.conf<< EOF
upstream dns-backend {
  server 127.0.0.1:8053;
}

server {
  listen 80;
  server_name $vpsdomain www.$vpsdomain;
  root  /home/wwwroot/$nginxdomain;
  index index.html index.htm index.php default.html default.htm default.php;
  return 301 https://\$server_name\$request_uri;

  include rewrite/none.conf;
  #error_page   404   /404.html;

  # Deny access to PHP files in specific directory
  #location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }

  include enable-php-pathinfo.conf;

  location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
  {
      expires      30d;
  }

  location ~ .*\.(js|css)?$
  {
      expires      12h;
  }

  location ~ /.well-known {
      allow all;
  }

  location ~ /\.
  {
      deny all;
  }

  access_log off;
  error_log off;
}

server {
  listen 443 ssl http2;
  server_name $vpsdomain www.$vpsdomain;
  root  /home/wwwroot/$nginxdomain;
  index index.html index.htm index.php default.html default.htm default.php;

  ssl on;
  ssl_certificate /usr/local/nginx/conf/ssl/$nginxdomain/fullchain.cer;
  ssl_certificate_key /usr/local/nginx/conf/ssl/$nginxdomain/$nginxdomain.key;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5";
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_dhparam /usr/local/nginx/conf/ssl/dhparam.pem;
  
  # OCSP Stapling ---
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /usr/local/nginx/conf/ssl/$nginxdomain/ocsp.resp;
  resolver 8.8.8.8 valid=600s;
  resolver_timeout 5s;


  include rewrite/none.conf;
  #error_page   404   /404.html;

  # Deny access to PHP files in specific directory
  #location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }

  include enable-php-pathinfo.conf;

  location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
  {
      expires      30d;
  }

  location ~ .*\.(js|css)?$
  {
      expires      12h;
  }

  location ~ /.well-known {
      allow all;
  }

  location ~ /\.
  {
      deny all;
  }

location /dq {
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "Upgrade";
  proxy_set_header Host "$vpsdomain";
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_buffering         off;
  proxy_buffer_size       8k;
  proxy_pass              http://dns-backend;
}

location $v2path {
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "Upgrade";
  proxy_set_header Host \$http_host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_buffering         off;
  proxy_buffer_size       8k;
  proxy_pass              http://127.0.0.1:11811;
}
  access_log off;
  error_log off;
}
EOF
fi

mkdir -p /etc/systemd/system/nginx.service.d
printf "[Service]\nExecStartPost=/bin/sleep 0.1\n" > /etc/systemd/system/nginx.service.d/override.conf
systemctl daemon-reload
systemctl restart nginx
systemctl enable nginx

if [[ ! -f "/usr/local/bin/pihole" ]]; then
curl -sSL https://install.pi-hole.net | bash

echo "" > /etc/pihole/adlists.list
pihole -g
sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_4=1.0.0.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_3=1.1.1.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_2=8.8.4.4' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_1=8.8.8.8' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.8.8' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.4.4' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.1.1.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.0.0.1' /etc/dnsmasq.d/01-pihole.conf
pihole restartdns

systemctl stop lighttpd
systemctl disable lighttpd
systemctl mask lighttpd
fi

if [[ "$(go version | awk '{print $3}')" != "go1.11.5" ]]; then
wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
tar -xvf go1.11.5.linux-amd64.tar.gz
rm -rf ~/go1.11.5.linux-amd64.tar.gz
mv go /usr/local
mkdir ~/gopath
cat >> ~/.profile << "EOF"
export GOROOT=/usr/local/go
export GOPATH=~/gopath
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
EOF
source ~/.profile
fi

if [[ ! -f "/usr/local/bin/doh-server" ]]; then
rm -rf ~/dns-over-https
rm -rf /usr/local/bin/doh-client
rm -rf /usr/local/bin/doh-server
rm -rf /etc/NetworkManager/dispatcher.d
rm -rf /usr/lib/systemd/system/doh-client.service
rm -rf /usr/lib/systemd/system/doh-server.service
git clone https://github.com/m13253/dns-over-https.git
cd dns-over-https
make && make install
cd ~
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/doh-client.conf -O /etc/dns-over-https/doh-client.conf
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/doh-server.conf -O /etc/dns-over-https/doh-server.conf
systemctl stop systemd-resolved
systemctl disable systemd-resolved
systemctl mask systemd-resolved
systemctl restart doh-server
systemctl enable doh-server
rm -rf ~/dns-over-https
fi

ethernetnum="$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1)"
localaddr="$(ip -oneline -family inet address show |  awk '{print $4}' | awk 'END {print}' | cut -d '/' -f1)"
gatewayaddr="$(route -n |  awk 'NR==3{print $2}')"
sed -i "/static ip_address=/c\static ip_address=$localaddr/24" /etc/dhcpcd.conf
sed -i "/static routers=/c\static routers=$gatewayaddr" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/c\static domain_name_servers=127.0.0.1" /etc/dhcpcd.conf
sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf
cat > /etc/network/interfaces << EOF
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF
sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
pihole restartdns
systemctl restart pihole-FTL

blue "-------------------------------------"
blue  "安装v2ray+nginx+tls+pihole+doh [完毕]"
blue "-------------------------------------"
}



change_pihole_upstream(){
    green "========================="
    green "1.使用8.8.8.8 / 2.使用DoH"
    green "========================="
    read -p "请输入1/2:" pihole_upstream
if [[ $pihole_upstream = 1 ]]; then
sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_4=1.0.0.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_3=1.1.1.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_2=8.8.4.4' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_1=8.8.8.8' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.8.8' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.4.4' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.1.1.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.0.0.1' /etc/dnsmasq.d/01-pihole.conf
pihole restartdns
systemctl stop doh-client
systemctl disable doh-client
blue "--------------------------------"
blue  "Pi-hole 上游解析已切换为 8.8.8.8"
blue "--------------------------------"
elif [[ $pihole_upstream = 2 ]]; then
sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_=127.0.0.1#5380' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
echo "server=127.0.0.1#5380" >> /etc/dnsmasq.d/01-pihole.conf
pihole restartdns
systemctl restart doh-client
systemctl enable doh-client
blue "----------------------------"
blue  "Pi-hole 上游解析已切换为 DoH"
blue "----------------------------"
fi
}



change_staticip(){
    green "====================="
    green "本机地址（留空回车跳过）"
    green "====================="
    read localaddr
if [[ "$localaddr" != "" ]]; then 
sed -i "/address/c\address $localaddr"  /etc/network/interfaces
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf
fi

    green "====================="
    green "网关地址（留空回车跳过）"
    green "====================="
    read gatewayaddr
if [[ "$gatewayaddr" != "" ]]; then 
sed -i "/gateway/c\gateway $gatewayaddr"  /etc/network/interfaces
fi

sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
sed -i "/static ip_address=/c\static ip_address=$localaddr/24" /etc/dhcpcd.conf
sed -i "/static routers=/c\static routers=$gatewayaddr" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/c\static domain_name_servers=127.0.0.1" /etc/dhcpcd.conf
blue "------------------"
blue  "更改静态IP [完毕]"
blue "------------------"
}



updatepihole(){
curl -sSL https://install.pi-hole.net | bash

echo "" > /etc/pihole/adlists.list
pihole -g

sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_4=1.0.0.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_3=1.1.1.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_2=8.8.4.4' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_1=8.8.8.8' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.8.8' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.4.4' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.1.1.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.0.0.1' /etc/dnsmasq.d/01-pihole.conf
pihole restartdns

systemctl stop lighttpd
systemctl disable lighttpd
systemctl mask lighttpd

blue "-------------------"
blue  "Pi-hole更新 [完毕]"
blue "-------------------"
}



change_v2rayverify(){
    green "========="
    green "新的UUID"
    green "========="
    read v2raynuuid

    green "========="
    green "新的path"
    green "========="
    read v2raynpath

if [[ -d "/etc/nginx" ]]; then
sed -i "$(sed -n -e '/location/=' /etc/nginx/conf.d/default.conf | awk 'NR==2{print}')s/.*/location "'\'$v2raynpath''" {/" /etc/nginx/conf.d/default.conf
elif [[ -d "/usr/local/nginx" ]]; then
nginxconf="$(rev <<< $(cd /usr/local/nginx/conf/vhost/ && ls) | cut -d"." -f2- | rev).conf"
sed -i "$(sed -n -e '/location/=' /usr/local/nginx/conf/vhost/$nginxconf | awk 'NR==12{print}')s/.*/location "'\'$v2raynpath''" {/" /usr/local/nginx/conf/vhost/$nginxconf
fi
systemctl restart nginx

sed -i "$(sed -n -e '/"id":/=' /etc/v2ray/config.json | awk 'NR==1{print}')s/.*/"'"id"'": "'"'$v2raynuuid'"'",/" /etc/v2ray/config.json
sed -i "$(sed -n -e '/"path":/=' /etc/v2ray/config.json | awk 'NR==1{print}')s/.*/"'"path"'": "'"\'$v2raynpath'"'"/" /etc/v2ray/config.json
systemctl restart v2ray
blue "--------------------------"
blue  "修改本机UUID&path [完毕]"
blue "--------------------------"
}



modify_upstream(){
    green "==============================="
    green "Y.修改上级跃点 / N.删除上级跃点"
    green "==============================="
    read v2rayupstreamyn
if [[ "$v2rayupstreamyn" = "Y" ]] || [[ "$v2rayupstreamyn" = "y" ]]; then
sed -i '/"outbounds":/,$d' /etc/v2ray/config.json

    green "============"
    green "上级跃点域名"
    green "============"
    read upstreamdomain

    green "============"
    green "上级跃点UUID"
    green "============"
    read upstreamuuid

    green "============"
    green "上级跃点path"
    green "============"
    read upstreampath

cat >> /etc/v2ray/config.json << EOF
  "outbounds": [
    {
    "mux": { "enabled": true },
    "protocol": "vmess",
    "settings": {
      "vnext": [{
        "address": "$upstreamdomain",
        "port": 443,
        "users": [{
          "id": "$upstreamuuid",
          "level": 1,
          "alterId": 64,
          "security": "AES-128-GCM"
          }]
        }]
    },
    "streamSettings": {
      "network": "ws",
      "security": "tls",
      "tlsSettings": {
        "serverName": "$upstreamdomain",
        "allowInsecure": false
        },
      "wsSettings": {
        "path": "$upstreampath",
        "headers": {
          "Host": "$upstreamdomain"
          }
        }
      }
    }
  ]
}
EOF
systemctl restart v2ray
blue "--------------------"
blue  "修改上级跃点 [完毕]"
blue "--------------------"

elif [[ "$v2rayupstreamyn" = "N" ]] || [[ "$v2rayupstreamyn" = "n" ]]; then
sed -i '/"outbounds":/,$d' /etc/v2ray/config.json
cat >> /etc/v2ray/config.json << EOF
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
EOF
systemctl restart v2ray
blue "--------------------"
blue  "删除上级跃点 [完毕]"
blue "--------------------"
fi
}



start_menu(){
statusgod=$(green "✔︎") 
statusbad=$(red "✘")

if [[ $(systemctl is-active v2ray) = "active" ]]; then
    echo "[$statusgod] v2ray     进程正常"
elif [[ ! -d "/usr/bin/v2ray" ]]; then
    echo "[$statusbad] v2ray     进程未安装"
else
    echo "[$statusbad] v2ray     进程出错"
fi


if [[ $(systemctl is-active nginx) = "active" ]]; then
    echo "[$statusgod] nginx     进程正常"
elif [[ ! -d "/usr/local/nginx" ]] && [[ ! -d "/etc/nginx" ]]; then
    echo "[$statusbad] nginx     进程未安装"
else
    echo "[$statusbad] nginx     进程出错"
fi


if [[ $(systemctl is-active doh-server) = "active" ]]; then
    echo "[$statusgod] DoH服务端 进程正常"
elif [ ! -d "/usr/local/bin/doh-server" ]; then
    echo "[$statusbad] DoH服务端 进程未安装"
else
    echo "[$statusbad] DoH服务端 进程出错"
fi


if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusgod] pihole    进程正常"
elif [ ! -d "/usr/local/bin/pihole" ]; then
    echo "[$statusbad] pihole    进程未安装"
else
    echo "[$statusbad] pihole    进程出错"
fi

    green "======================================"
    green "              服务端                   "
    green "介绍：一键安装v2ray+ws+tls+doh+pihole   "
    green "系统：仅测于Debian9                     "
    green "作者：jacyl4                           "
    green "网站：jacyl4.github.io                 "
    green "======================================"
    echo
    green  "1. 安装v2ray+nginx+tls+pihole+doh"
    green  "2. 切换Pi-hole上游"
    red  "3. 更改静态IP"
    yellow  "8. 更新Pi-hole"
    yellow  "9. 修改本机UUID&path"
    yellow  "0. 设置v2ray上级跃点"
    yellow "CTRL+C退出"
    echo
    read -p "请输入数字:" num
    case "$num" in
    1)
    install_v2ray+nginx+tls+pihole+doh
    start_menu
    ;;
    2)
    change_pihole_upstream
    start_menu
    ;;
    3)
    change_staticip
    start_menu 
    ;;
    8)
    updatepihole
    start_menu 
    ;;
    9)
    change_v2rayverify
    start_menu 
    ;;
    0)
    modify_upstream
    start_menu 
    ;;    *)
    clear
    red "请输入正确数字"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu