#!/bin/bash
clear
function blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
function yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
function green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
function red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }


function preinstall(){
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_TYPE=en_US.UTF-8
export LANG=en_US.UTF-8
locale-gen en_US.UTF-8

sed -i '/GRUB_CMDLINE_LINUX_DEFAULT=/c\GRUB_CMDLINE_LINUX_DEFAULT="quiet splash zswap.enabled=1 zswap.compressor=lz4"'  /etc/default/grub
update-grub
sed -i '/net.ipv6.conf.all.disable_ipv6/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_fastopen/d' /etc/sysctl.conf
sed -i '/fs.file-max/d' /etc/sysctl.conf
sed -i '/fs.inotify.max_user_instances/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_fin_timeout/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_tw_reuse/d' /etc/sysctl.conf
sed -i '/net.ipv4.ip_local_port_range/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_max_syn_backlog/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_max_tw_buckets/d' /etc/sysctl.conf
sed -i '/net.ipv4.route.gc_timeout/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_syn_retries/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_synack_retries/d' /etc/sysctl.conf
sed -i '/net.core.somaxconn/d' /etc/sysctl.conf
sed -i '/net.core.netdev_max_backlog/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_timestamps/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_max_orphans/d' /etc/sysctl.conf

sed -i '/65536/d' /etc/security/limits.conf
sed -i '/# End of file/i\* soft nproc 65536' /etc/security/limits.conf
sed -i '/# End of file/i\* hard nproc 65536' /etc/security/limits.conf
sed -i '/# End of file/i\* soft nofile 65536' /etc/security/limits.conf
sed -i '/# End of file/i\* hard nofile 65536' /etc/security/limits.conf
echo "ulimit -n 65536" > .bash_profile

cat >> /etc/sysctl.conf << EOF
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv4.tcp_fastopen = 3
fs.file-max = 1000000
fs.inotify.max_user_instances = 8192
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_tw_reuse = 1
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.route.gc_timeout = 100
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_synack_retries = 1
net.core.somaxconn = 32768
net.core.netdev_max_backlog = 32768
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_max_orphans = 32768
EOF
sysctl -p

apt update && apt -y upgrade
apt install -y curl net-tools ca-certificates unzip git make gcc build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libatomic-ops-dev socat
}


function installv2ray(){
mkdir -p /etc/v2ray
mkdir -p /usr/bin/v2ray
mkdir -p /var/log/v2ray
wget --no-check-certificate https://github.com/jacyl4/de_GWD/raw/master/de_GWD_Client/v2amd64.zip -O ~/v2amd64.zip
unzip v2amd64.zip
mv -f ~/v2amd64/v2ray /usr/bin/v2ray/v2ray
mv -f ~/v2amd64/v2ctl /usr/bin/v2ray/v2ctl
mv -f ~/v2amd64/v2ray.service /etc/systemd/system/v2ray.service
rm -rf ~/v2amd64
rm -rf ~/v2amd64.zip
chmod +x /usr/bin/v2ray/v2ray
chmod +x /usr/bin/v2ray/v2ctl
}


function installnginxlasest(){
wget --no-check-certificate https://www.openssl.org/source/openssl-1.1.1b.tar.gz
tar zxvf openssl-1.1.1b.tar.gz
cd openssl-1.1.1b

wget --no-check-certificate https://github.com/hakasenyang/openssl-patch/raw/master/openssl-equal-1.1.1b.patch
wget --no-check-certificate https://github.com/hakasenyang/openssl-patch/raw/master/openssl-1.1.1b-chacha_draft.patch
patch -p1 < openssl-equal-1.1.1b.patch
patch -p1 < openssl-1.1.1b-chacha_draft.patch

./config -Wl,--enable-new-dtags,-rpath,'$(LIBRPATH)'
make -j $(nproc --all) && make install
cp /usr/local/bin/openssl /usr/bin/
export LD_LIBRARY_PATH=/usr/local/lib
echo "export LD_LIBRARY_PATH=/usr/local/lib" >> ~/.bashrc
cd ~


wget --no-check-certificate https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz
tar -zxvf pcre-8.43.tar.gz
cd pcre-8.43
./configure
make -j $(nproc --all) && make install
cd ~


wget --no-check-certificate https://github.com/jemalloc/jemalloc/releases/download/5.2.0/jemalloc-5.2.0.tar.bz2
tar xjvf jemalloc-5.2.0.tar.bz2
cd jemalloc-5.2.0
./configure
make -j $(nproc --all) && make install
echo '/usr/local/lib' > /etc/ld.so.conf.d/local.conf
ldconfig
cd ~


git clone https://github.com/eustas/ngx_brotli.git
pushd ngx_brotli
git submodule update --init
cd ~

mkdir -p /usr/lib64/nginx/modules
mkdir -p /etc/nginx/conf.d
mkdir -p /var/log/nginx
mkdir -p /var/cache/nginx/client_temp
mkdir -p /var/cache/nginx/proxy_temp
mkdir -p /var/cache/nginx/fastcgi_temp
mkdir -p /var/cache/nginx/uwsgi_temp
mkdir -p /var/cache/nginx/scgi_temp

wget --no-check-certificate https://nginx.org/download/nginx-1.17.0.tar.gz
tar zxvf nginx-1.17.0.tar.gz
sed -i 's@CFLAGS="$CFLAGS -g"@#CFLAGS="$CFLAGS -g"@' ~/nginx-1.17.0/auto/cc/gcc
[ ! -d "/etc/nginx" ] && mkdir -p /etc/nginx
cd nginx-1.17.0
wget --no-check-certificate https://github.com/kn007/patch/raw/master/nginx.patch
patch -p1 < nginx.patch

./configure \
--prefix=/etc/nginx \
--sbin-path=/usr/sbin/nginx \
--modules-path=/usr/lib64/nginx/modules \
--conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--pid-path=/var/run/nginx.pid \
--lock-path=/var/run/nginx.lock \
--http-client-body-temp-path=/var/cache/nginx/client_temp \
--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
--user=www-data \
--group=www-data \
--with-compat \
--with-file-aio \
--with-threads \
--with-http_addition_module \
--with-http_auth_request_module \
--with-http_dav_module \
--with-http_flv_module \
--with-http_gunzip_module \
--with-http_gzip_static_module \
--with-http_mp4_module \
--with-http_random_index_module \
--with-libatomic \
--with-openssl=../openssl-1.1.1b \
--with-openssl-opt='enable-tls1_3 zlib -march=native -ljemalloc -Wl,-flto' \
--with-http_realip_module \
--with-http_secure_link_module \
--with-http_slice_module \
--with-http_ssl_module \
--with-http_stub_status_module \
--with-http_sub_module \
--with-http_v2_module \
--with-mail \
--with-mail_ssl_module \
--with-stream \
--with-stream_realip_module \
--with-stream_ssl_module \
--with-stream_ssl_preread_module \
--with-pcre=../pcre-8.43 \
--with-pcre-jit \
--with-http_degradation_module \
--with-cc-opt='-DTCP_FASTOPEN=23 -g -O2 -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' \
--with-ld-opt='-ljemalloc -Wl,-z,relro' \
--with-http_spdy_module \
--with-http_v2_hpack_enc \
--add-module=../ngx_brotli

make -j $(nproc --all) && make install


cat > /lib/systemd/system/nginx.service << EOF
# Stop dance for nginx
# =======================
#
# ExecStop sends SIGSTOP (graceful stop) to the nginx process.
# If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control
# and sends SIGTERM (fast shutdown) to the main process.
# After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends
# SIGKILL to all the remaining processes in the process group (KillMode=mixed).
#
# nginx signals reference doc:
# http://nginx.org/en/docs/control.html
#
[Unit]
Description=A high performance web server and a reverse proxy server
Documentation=man:nginx(8)
After=network.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'
ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'
ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload
ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid
TimeoutStopSec=5
KillMode=mixed

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/nginx/nginx.conf << EOF
user  www-data www-data;
worker_processes auto;

    worker_rlimit_nofile 65535;

events {
    use epoll;
    worker_connections  65535;
    multi_accept on;
}

http {
  include mime.types;
  default_type application/octet-stream;

  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 1024m;
  client_body_buffer_size 10m;

  sendfile on;
  tcp_nopush on;
  keepalive_timeout 120;
  server_tokens off;
  tcp_nodelay on;

  gzip              on;
  gzip_disable      "MSIE [1-6]\.(?!.*SV1)";
  gzip_vary         on;
  gzip_proxied      any;
  gzip_comp_level   6;
  gzip_min_length   256;
  gzip_buffers      4 16k;
  gzip_http_version 1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf 
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;

  brotli             on;
  brotli_static      on;
  brotli_comp_level  6;
  brotli_buffers     32 8k;
  brotli_types       text/plain
                     text/javascript
                     text/css
                     text/js
                     text/xml
                     text/x-component
                     text/x-json
                     font/opentype
                     application/x-font-ttf 
                     application/javascript
                     application/x-javascript
                     application/x-web-app-manifest+json
                     application/json
                     application/atom+xml
                     application/xml
                     application/xml+rss
                     application/xhtml+xml
                     application/vnd.ms-fontobject
                     image/svg+xml
                     image/x-icon;

  access_log off;
  error_log off;

  include /etc/nginx/conf.d/*.conf;
}
EOF

systemctl daemon-reload
systemctl restart nginx
systemctl enable nginx
}


function confignginxpure(){
cat > /etc/nginx/conf.d/default.conf<< EOF
server {
    listen       80;
    server_name  $vpsdomain;
    root /var/www/html;
    index index.php index.html index.htm;
}
EOF
systemctl restart nginx

mkdir -p /var/www/ssl
curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --issue -d $vpsdomain -w /var/www/html
~/.acme.sh/acme.sh --installcert -d $vpsdomain \
               --keypath       /var/www/ssl/$vpsdomain.key  \
               --fullchainpath /var/www/ssl/$vpsdomain.key.pem \
               --reloadcmd     "systemctl force-reload nginx"
openssl dhparam -out /var/www/ssl/dhparam.pem 2048
openssl x509 -outform der -in /var/www/ssl/$vpsdomain.key.pem -out /var/www/ssl/$vpsdomain.crt


cat > /var/www/ssl/update_ocsp_cache << EOF
#!/bin/bash
wget -O intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv intermediate.pem /var/www/ssl
mv root.pem /var/www/ssl
cat /var/www/ssl/intermediate.pem > /var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >> /var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/$vpsdomain.key.pem \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /var/www/ssl/ocsp.resp
EOF
chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

if [[ "$(crontab -l | grep 'update_ocsp_cache' | awk '{print $6}')" != "/var/www/ssl/update_ocsp_cache" ]]; then
crontab -l > now.cron
echo '0 0 * * 7 /var/www/ssl/update_ocsp_cache' >> now.cron
crontab now.cron
fi

cat > /etc/nginx/conf.d/default.conf<< EOF
upstream dns-backend {
  server 127.0.0.1:8053;
}

server {
  listen 80;
  server_name $vpsdomain www.$vpsdomain;
  root /var/www/html;
  index index.php index.html index.htm index.nginx-debian.html;

  access_log off;
  error_log off;

  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 ssl http2;
  server_name $vpsdomain www.$vpsdomain;
  root /var/www/html;
  index index.php index.html index.htm index.nginx-debian.html;

  ssl_certificate /var/www/ssl/$vpsdomain.key.pem;
  ssl_certificate_key /var/www/ssl/$vpsdomain.key;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;
  ssl_session_timeout 10m;
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_buffer_size 1400;
  add_header Strict-Transport-Security max-age=15768000;
  ssl_dhparam /var/www/ssl/dhparam.pem;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  
  # OCSP Stapling ---
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  resolver 8.8.8.8 valid=600s;
  resolver_timeout 5s;

location /dq {
  proxy_http_version 1.1;
  proxy_hide_header Vary;
  proxy_set_header Accept-Encoding '';
  proxy_set_header Referer \$http_referer;
  proxy_set_header Cookie \$http_cookie;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "Upgrade";
  proxy_set_header Host \$host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto \$scheme;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_buffering         off;
  proxy_buffer_size       8k;
  proxy_intercept_errors  on;
  proxy_pass http://dns-backend;
}

location $v2path {
  proxy_http_version 1.1;
  proxy_hide_header Vary;
  proxy_set_header Accept-Encoding '';
  proxy_set_header Referer \$http_referer;
  proxy_set_header Cookie \$http_cookie;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "Upgrade";
  proxy_set_header Host \$host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto \$scheme;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_buffering         off;
  proxy_buffer_size       8k;
  proxy_intercept_errors  on;
  proxy_pass              http://127.0.0.1:11811;
}
  access_log off;
  error_log off;
}
EOF
}


function installpihole(){
curl -sSL https://install.pi-hole.net | bash
systemctl disable lighttpd
systemctl mask lighttpd
echo "" > /etc/pihole/adlists.list
pihole -g
sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_4=1.0.0.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_3=1.1.1.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_2=8.8.4.4' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_1=8.8.8.8' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.8.8' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.4.4' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.1.1.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.0.0.1' /etc/dnsmasq.d/01-pihole.conf
pihole restartdns
}


function installdoh(){
source ~/.profile
rm -rf ~/dns-over-https
rm -rf /usr/local/bin/doh-client
rm -rf /usr/local/bin/doh-server
rm -rf /etc/NetworkManager/dispatcher.d
rm -rf /usr/lib/systemd/system/doh-client.service
rm -rf /usr/lib/systemd/system/doh-server.service
git clone https://github.com/m13253/dns-over-https.git
cd dns-over-https
make -j $(nproc --all) && make install
cd ~
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/doh-client.conf -O /etc/dns-over-https/doh-client.conf
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/doh-server.conf -O /etc/dns-over-https/doh-server.conf
systemctl disable systemd-resolved
systemctl mask systemd-resolved
systemctl daemon-reload
systemctl restart doh-server
systemctl enable doh-server
rm -rf ~/dns-over-https
}


function postinstall(){
cat > /usr/local/bin/updateGWD << "EOF"
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w
EOF
chmod +x /usr/local/bin/updateGWD
/usr/local/bin/updateGWD

if [[ "$(crontab -l | grep 'updateGWD' | awk '{print $6}')" != "/usr/local/bin/updateGWD" ]]; then
crontab -l > now.cron
echo '0 0 * * * /usr/local/bin/updateGWD' >> now.cron
crontab now.cron
fi
rm -rf now.cron
}



installgwd(){
    green "=============================="
    green " 输入此VPS的域名(不加www开头)"
    green "=============================="
    read vpsdomain

    green "=============================="
    green " v2ray uuid"
    green "=============================="
    read uuidnum

    green "=============================="
    green " v2ray path (格式：/xxxx)"
    green "=============================="
    read v2path

cd ~
preinstall

installv2ray
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/v2wt-server.json -O /etc/v2ray/config.json
sed -i '/"id":/c\"id": "'$uuidnum'",'  /etc/v2ray/config.json
sed -i '/"path":/c\"path": "'$v2path'"'  /etc/v2ray/config.json
systemctl restart v2ray
systemctl enable v2ray

installnginxlasest

confignginxpure

mkdir -p /etc/systemd/system/nginx.service.d
printf "[Service]\nExecStartPost=/bin/sleep 0.1\n" > /etc/systemd/system/nginx.service.d/override.conf
systemctl daemon-reload
systemctl restart nginx
systemctl enable nginx

installpihole

wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
tar -xvf go1.11.5.linux-amd64.tar.gz
rm -rf ~/go1.11.5.linux-amd64.tar.gz
mv go /usr/local
mkdir ~/gopath
cat >> ~/.profile << "EOF"
export GOROOT=/usr/local/go
export GOPATH=~/gopath
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
EOF

installdoh

ethernetnum="$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1)"
localaddr="$(ip -oneline -family inet address show |  awk '{print $4}' | awk 'END {print}' | cut -d '/' -f1)"
gatewayaddr="$(route -n |  awk 'NR==3{print $2}')"
sed -i "/static ip_address=/c\static ip_address=$localaddr/24" /etc/dhcpcd.conf
sed -i "/static routers=/c\static routers=$gatewayaddr" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/c\static domain_name_servers=127.0.0.1" /etc/dhcpcd.conf
sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf
cat > /etc/network/interfaces << EOF
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF
sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
pihole restartdns

postinstall

blue "------------------"
blue  "安装de_GWD [完毕]"
blue "------------------"
}



change_pihole_upstream(){
    green "========================="
    green "1.使用8.8.8.8 / 2.使用DoH"
    green "========================="
    read -p "请输入1/2:" pihole_upstream
if [[ $pihole_upstream = 1 ]]; then
sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_4=1.0.0.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_3=1.1.1.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_2=8.8.4.4' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_1=8.8.8.8' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.8.8' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.4.4' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.1.1.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.0.0.1' /etc/dnsmasq.d/01-pihole.conf
pihole restartdns
systemctl stop doh-client
systemctl disable doh-client
blue "--------------------------------"
blue  "Pi-hole 上游解析已切换为 8.8.8.8"
blue "--------------------------------"
elif [[ $pihole_upstream = 2 ]]; then
sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_=127.0.0.1#5380' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
echo "server=127.0.0.1#5380" >> /etc/dnsmasq.d/01-pihole.conf
pihole restartdns
systemctl restart doh-client
systemctl enable doh-client
blue "----------------------------"
blue  "Pi-hole 上游解析已切换为 DoH"
blue "----------------------------"
fi
}



change_staticip(){
    green "====================="
    green "本机地址（留空回车跳过）"
    green "====================="
    read localaddr
if [[ "$localaddr" != "" ]]; then 
sed -i "/address/c\address $localaddr"  /etc/network/interfaces
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf
fi

    green "====================="
    green "网关地址（留空回车跳过）"
    green "====================="
    read gatewayaddr
if [[ "$gatewayaddr" != "" ]]; then 
sed -i "/gateway/c\gateway $gatewayaddr"  /etc/network/interfaces
fi

sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
sed -i "/static ip_address=/c\static ip_address=$localaddr/24" /etc/dhcpcd.conf
sed -i "/static routers=/c\static routers=$gatewayaddr" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/c\static domain_name_servers=127.0.0.1" /etc/dhcpcd.conf
blue "------------------"
blue  "更改静态IP [完毕]"
blue "------------------"
}



modify_upstream(){
    green "==============================="
    green "Y.修改上级跃点 / N.删除上级跃点"
    green "==============================="
    read v2rayupstreamyn
if [[ "$v2rayupstreamyn" = "Y" ]] || [[ "$v2rayupstreamyn" = "y" ]]; then
sed -i '/"outbounds":/,$d' /etc/v2ray/config.json

    green "============"
    green "上级跃点域名"
    green "============"
    read upstreamdomain

    green "============"
    green "上级跃点UUID"
    green "============"
    read upstreamuuid

    green "============"
    green "上级跃点path"
    green "============"
    read upstreampath

cat >> /etc/v2ray/config.json << EOF
  "outbounds": [
    {
    "mux": { "enabled": true },
    "protocol": "vmess",
    "settings": {
      "vnext": [{
        "address": "$upstreamdomain",
        "port": 443,
        "users": [{
          "id": "$upstreamuuid",
          "level": 1,
          "alterId": 64,
          "security": "AES-128-GCM"
          }]
        }]
    },
    "streamSettings": {
      "network": "ws",
      "security": "tls",
      "tlsSettings": {
        "serverName": "$upstreamdomain",
        "allowInsecure": false
        },
      "wsSettings": {
        "path": "$upstreampath",
        "headers": {
          "Host": "$upstreamdomain"
          }
        }
      }
    }
  ]
}
EOF
systemctl restart v2ray
blue "--------------------"
blue  "修改上级跃点 [完毕]"
blue "--------------------"

elif [[ "$v2rayupstreamyn" = "N" ]] || [[ "$v2rayupstreamyn" = "n" ]]; then
sed -i '/"outbounds":/,$d' /etc/v2ray/config.json
cat >> /etc/v2ray/config.json << EOF
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
EOF
systemctl restart v2ray
blue "--------------------"
blue  "删除上级跃点 [完毕]"
blue "--------------------"
fi
}



change_v2rayverify(){
    green "========="
    green "新的UUID"
    green "========="
    read v2raynuuid

    green "========="
    green "新的path"
    green "========="
    read v2raynpath

if [[ -d "/etc/nginx" ]]; then
sed -i "$(sed -n -e '/location/=' /etc/nginx/conf.d/default.conf | awk 'NR==2{print}')s/.*/location "'\'$v2raynpath''" {/" /etc/nginx/conf.d/default.conf
elif [[ -d "/usr/local/nginx" ]]; then
nginxconf="$(rev <<< $(cd /usr/local/nginx/conf/vhost/ && ls) | cut -d"." -f2- | rev).conf"
sed -i "$(sed -n -e '/location/=' /usr/local/nginx/conf/vhost/$nginxconf | awk 'NR==12{print}')s/.*/location "'\'$v2raynpath''" {/" /usr/local/nginx/conf/vhost/$nginxconf
fi
systemctl restart nginx

sed -i "$(sed -n -e '/"id":/=' /etc/v2ray/config.json | awk 'NR==1{print}')s/.*/"'"id"'": "'"'$v2raynuuid'"'",/" /etc/v2ray/config.json
sed -i "$(sed -n -e '/"path":/=' /etc/v2ray/config.json | awk 'NR==1{print}')s/.*/"'"path"'": "'"\'$v2raynpath'"'"/" /etc/v2ray/config.json
systemctl restart v2ray
blue "-------------------------"
blue  "修改本机UUID&path [完毕]"
blue "-------------------------"
}



updatepihole(){
installpihole

blue "-------------------"
blue "更新Pi-hole [完毕]"
blue "-------------------"
}



updategwd(){
cd ~
preinstall
uuidnum=$(awk "/[Ri]d/" /etc/v2ray/config.json | awk 'NR==1{print}' | cut -d '"' -f 4)
v2path=$(awk "/[Rp]ath/" /etc/v2ray/config.json | awk 'NR==1{print}' | cut -d '"' -f 4)

installv2ray
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/v2wt-server.json -O /etc/v2ray/config.json
sed -i '/"id":/c\"id": "'$uuidnum'",'  /etc/v2ray/config.json
sed -i '/"path":/c\"path": "'$v2path'"'  /etc/v2ray/config.json
systemctl daemon-reload
systemctl restart v2ray
systemctl enable v2ray

installdoh

postinstall
blue "------------------"
blue  "更新de_GWD [完毕]"
blue "------------------"
}



start_menu(){
statusgod=$(green "✔︎") 
statusbad=$(red "✘")

if [[ $(systemctl is-active v2ray) = "active" ]]; then
    echo "[$statusgod] v2ray     进程正常"
elif [[ ! -d "/usr/bin/v2ray" ]]; then
    echo "[$statusbad] v2ray     进程未安装"
else
    echo "[$statusbad] v2ray     进程出错"
fi


if [[ $(systemctl is-active nginx) = "active" ]]; then
    echo "[$statusgod] nginx     进程正常"
elif [[ ! -d "/usr/local/nginx" ]] && [[ ! -d "/etc/nginx" ]]; then
    echo "[$statusbad] nginx     进程未安装"
else
    echo "[$statusbad] nginx     进程出错"
fi


if [[ $(systemctl is-active doh-server) = "active" ]]; then
    echo "[$statusgod] DoH服务端 进程正常"
elif [ ! -d "/usr/local/bin/doh-server" ]; then
    echo "[$statusbad] DoH服务端 进程未安装"
else
    echo "[$statusbad] DoH服务端 进程出错"
fi


if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusgod] pihole    进程正常"
elif [ ! -d "/usr/local/bin/pihole" ]; then
    echo "[$statusbad] pihole    进程未安装"
else
    echo "[$statusbad] pihole    进程出错"
fi

    green "========================"
    green "     服务端（编译测试版）  "
    green "介绍：一键安装de_GWD      "
    green "系统：仅测于Debian9       "
    green "作者：jacyl4             "
    green "网站：jacyl4.github.io   "
    green "========================"
    echo
    green  "1. 安装de_GWD"
    green  "2. 切换Pi-hole上游"
    red    "6. 更改静态IP"
    yellow "7. 设置v2ray上级跃点"
    yellow "8. 修改本机UUID&path"
    yellow "9. 更新Pi-hole"
    yellow "0. 更新de_GWD"
    red    "CTRL+C退出"
    echo
    read -p "请输入数字:" num
    case "$num" in
    1)
    installgwd
    start_menu
    ;;
    2)
    change_pihole_upstream
    start_menu
    ;;
    6)
    change_staticip
    start_menu 
    ;;
    7)
    modify_upstream
    start_menu 
    ;;
    8)
    change_v2rayverify
    start_menu 
    ;;
    9)
    updatepihole
    start_menu 
    ;;
    0)
    updategwd
    start_menu 
    ;;
    *)
    clear
    red "请输入正确数字"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu